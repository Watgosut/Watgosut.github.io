{"version":3,"file":"js/35.907ad658.js","mappings":"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","sources":["webpack://mst-vue/./src/views/AlgorithmView.vue","webpack://mst-vue/src/views/AlgorithmView.vue","webpack://mst-vue/./src/views/AlgorithmView.vue?879c","webpack://mst-vue/./src/views/AlgorithmView.vue?364a"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_vm._m(0),_c('div',{staticClass:\"footer\"},[_c('el-row',{attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"xs\":24,\"sm\":12,\"md\":12,\"lg\":12,\"xl\":12}},[_c('el-card',{staticClass:\"card\"},[_c('div',{staticClass:\"card_content\"},[_c('div',{staticClass:\"card_title\"},[_vm._v(\" Minimum Spanning Tree algorithms \")]),_c('div',{staticClass:\"card_subtitle\"},[_vm._v(\"Prim Algorithm\")]),_c('div',{staticStyle:{\"width\":\"90%\"}},[_c('p',[_vm._v(\"In computer science, Prim's algorithm (also known as Jarn√≠k's algorithm) is a greedy algorithm that finds a minimum spanning tree for a weighted undirected graph.\")])]),_c('el-divider'),_c('p',[_vm._v(\"Number of Vertices\")]),_c('el-input',{attrs:{\"placeholder\":\"numbers of node in graph\"},model:{value:(_vm.prim_num),callback:function ($$v) {_vm.prim_num=$$v},expression:\"prim_num\"}}),_c('p',[_vm._v(\"Start Node\")]),_c('el-input',{attrs:{\"placeholder\":\"start node\"},model:{value:(_vm.prim_start),callback:function ($$v) {_vm.prim_start=$$v},expression:\"prim_start\"}}),_c('el-row',[_c('p',[_vm._v(\"Generate or Import Graph?\")]),_c('div',[_c('el-select',{attrs:{\"placeholder\":\"Type of way for create graph\"},model:{value:(_vm.prim_select_type),callback:function ($$v) {_vm.prim_select_type=$$v},expression:\"prim_select_type\"}},_vm._l((_vm.typeOption),function(item){return _c('el-option',{key:item.value,attrs:{\"label\":item.label,\"value\":item.value}})}),1)],1),(_vm.prim_select_type === 'Import Graph from file')?_c('div',[_c('div',{staticClass:\"tip\"},[_c('b',[_vm._v(\"Note:\")]),_c('p',[_vm._v(\"1. The id of node will start from 0.\")]),_c('p',[_vm._v(\"2. The input consists of the number of edges in the graph\")]),_c('p',[_vm._v(\"3. Each line is in the form of (start node, end node, weight).\")]),_c('p',[_vm._v(\"4. Edges have same start node and end node will be record once.\")]),_c('p',[_vm._v(\"5. Only txt file permitted\")])]),_c('el-upload',{attrs:{\"accept\":\".txt\",\"show-file-list\":false,\"action\":\"\",\"auto-upload\":false,\"on-change\":_vm.primUpload,\"limit\":1,\"on-exceed\":_vm.handlePrimExceed,\"file-list\":_vm.fileList}},[_c('el-button',{staticStyle:{\"width\":\"200px\"},attrs:{\"type\":\"primary\"}},[_vm._v(\"Select File\")])],1),_c('el-input',{attrs:{\"disabled\":\"\",\"type\":\"textarea\",\"rows\":4},model:{value:(_vm.prim_file_graph),callback:function ($$v) {_vm.prim_file_graph=$$v},expression:\"prim_file_graph\"}})],1):_vm._e(),(_vm.prim_select_type === 'Import Graph from text box')?_c('div',[_c('div',{staticClass:\"tip\"},[_c('b',[_vm._v(\"Note:\")]),_c('p',[_vm._v(\"1. The id of node will start from 0.\")]),_c('p',[_vm._v(\"2. The input consists of the number of edges in the graph\")]),_c('p',[_vm._v(\"3. Each line is in the form of (start node, end node, weight).\")]),_c('p',[_vm._v(\"4. Edges have same start node and end node will be record once.\")])]),_c('el-input',{attrs:{\"type\":\"textarea\",\"rows\":4,\"placeholder\":\"Please input your graph\"},model:{value:(_vm.prim_graph_text),callback:function ($$v) {_vm.prim_graph_text=$$v},expression:\"prim_graph_text\"}})],1):_vm._e()]),_c('div',[_c('el-button',{staticStyle:{\"width\":\"200px\"},attrs:{\"type\":\"primary\"},on:{\"click\":_vm.prim}},[_vm._v(\"Start Algorithm\")])],1)],1)])],1),_c('el-col',{attrs:{\"xs\":24,\"sm\":12,\"md\":12,\"lg\":12,\"xl\":12}},[_c('el-card',{staticClass:\"card\"},[_c('div',{staticClass:\"card_content\"},[_c('div',{staticClass:\"card_title\"},[_vm._v(\" Minimum Spanning Tree algorithms \")]),_c('div',{staticClass:\"card_subtitle\"},[_vm._v(\"Kruskal Algorithm\")]),_c('div',{staticStyle:{\"width\":\"90%\"}},[_c('p',[_vm._v(\"Kruskal's algorithm is a greedy algorithm that in each step adds to the forest the lowest-weight edge that will not form a cycle. The key steps of the algorithm are sorting and detect cycles.\")])]),_c('el-divider'),_c('p',[_vm._v(\"Number of Vertices\")]),_c('el-input',{attrs:{\"placeholder\":\"numbers of node in graph\"},model:{value:(_vm.kruskal_num),callback:function ($$v) {_vm.kruskal_num=$$v},expression:\"kruskal_num\"}}),_c('el-row',[_c('p',[_vm._v(\"Generate or Import Graph?\")]),_c('div',[_c('el-select',{attrs:{\"placeholder\":\"Type of way for create graph\"},model:{value:(_vm.kruskal_select_type),callback:function ($$v) {_vm.kruskal_select_type=$$v},expression:\"kruskal_select_type\"}},_vm._l((_vm.typeOption),function(item){return _c('el-option',{key:item.value,attrs:{\"label\":item.label,\"value\":item.value}})}),1)],1),(_vm.kruskal_select_type === 'Import Graph from file')?_c('div',[_c('div',{staticClass:\"tip\"},[_c('b',[_vm._v(\"Note:\")]),_c('p',[_vm._v(\"1. The id of node will start from 0.\")]),_c('p',[_vm._v(\"2. The input consists of the number of edges in the graph\")]),_c('p',[_vm._v(\"3. Each line is in the form of (start node, end node, weight).\")]),_c('p',[_vm._v(\"4. Edges have same start node and end node will be record once.\")]),_c('p',[_vm._v(\"5. Only txt file permitted\")])]),_c('el-upload',{attrs:{\"accept\":\".txt\",\"show-file-list\":false,\"action\":\"\",\"auto-upload\":false,\"on-change\":_vm.kruUpload,\"limit\":1,\"on-exceed\":_vm.handleKruExceed,\"file-list\":_vm.fileList}},[_c('el-button',{staticStyle:{\"width\":\"200px\"},attrs:{\"type\":\"primary\"}},[_vm._v(\"Select File\")])],1),_c('el-input',{attrs:{\"disabled\":\"\",\"type\":\"textarea\",\"rows\":4},model:{value:(_vm.kruskal_file_graph),callback:function ($$v) {_vm.kruskal_file_graph=$$v},expression:\"kruskal_file_graph\"}})],1):_vm._e(),(_vm.kruskal_select_type === 'Import Graph from text box')?_c('div',[_c('div',{staticClass:\"tip\"},[_c('b',[_vm._v(\"Note:\")]),_c('p',[_vm._v(\"1. The id of node will start from 0.\")]),_c('p',[_vm._v(\"2. The input consists of the number of edges in the graph\")]),_c('p',[_vm._v(\"3. Each line is in the form of (start node, end node, weight).\")]),_c('p',[_vm._v(\"4. Edges have same start node and end node will be record once.\")])]),_c('el-input',{attrs:{\"type\":\"textarea\",\"rows\":4,\"placeholder\":\"Please input your graph\"},model:{value:(_vm.kruskal_graph_text),callback:function ($$v) {_vm.kruskal_graph_text=$$v},expression:\"kruskal_graph_text\"}})],1):_vm._e()]),_c('div',[_c('el-button',{staticStyle:{\"width\":\"200px\"},attrs:{\"type\":\"primary\"},on:{\"click\":_vm.kruskal}},[_vm._v(\"Start Algorithm\")])],1)],1)])],1)],1)],1)])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"text\",staticStyle:{\"margin\":\"5%\"}},[_c('h1',{staticStyle:{\"color\":\"#409EFF\"}},[_vm._v(\"Learn Minimum Spanning Forest Algorithm!\")])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <div class=\"text\" style=\"margin: 5%\">\r\n            <h1 style=\"color: #409EFF\">Learn Minimum Spanning Forest Algorithm!</h1>\r\n        </div>\r\n        <div class=\"footer\">\r\n            <el-row :gutter=\"20\">\r\n                <el-col :xs=\"24\" :sm=\"12\" :md=\"12\" :lg=\"12\" :xl=\"12\">\r\n                    <el-card class=\"card\">\r\n                        <div class=\"card_content\">\r\n                            <div class=\"card_title\">\r\n                                Minimum Spanning Tree algorithms\r\n                            </div>\r\n                            <div class=\"card_subtitle\">Prim Algorithm</div>\r\n                            <div style=\"width: 90%\">\r\n                                <p>In computer science, Prim's algorithm (also known as Jarn√≠k's algorithm) is a greedy algorithm that finds a minimum spanning tree for a weighted undirected graph.</p>\r\n                            </div>\r\n                            <el-divider></el-divider>\r\n                                <p>Number of Vertices</p>\r\n                                <el-input placeholder=\"numbers of node in graph\" v-model=\"prim_num\"></el-input>\r\n                                <p>Start Node</p>\r\n                                <el-input placeholder=\"start node\" v-model=\"prim_start\"></el-input>\r\n                            <el-row>\r\n                                    <p>Generate or Import Graph?</p>\r\n                                <div>\r\n                                    <el-select v-model=\"prim_select_type\" placeholder=\"Type of way for create graph\">\r\n                                        <el-option v-for=\"item in typeOption\"\r\n                                                   :key=\"item.value\"\r\n                                                   :label=\"item.label\"\r\n                                                   :value=\"item.value\"></el-option>\r\n                                    </el-select>\r\n                                </div>\r\n                                <div v-if=\"prim_select_type === 'Import Graph from file'\">\r\n                                    <div class=\"tip\">\r\n                                        <b>Note:</b>\r\n                                        <p>1. The id of node will start from 0.</p>\r\n                                        <p>2. The input consists of the number of edges in the graph</p>\r\n                                        <p>3. Each line is in the form of (start node, end node, weight).</p>\r\n                                        <p>4. Edges have same start node and end node will be record once.</p>\r\n                                        <p>5. Only txt file permitted</p>\r\n                                    </div>\r\n\r\n                                    <el-upload\r\n                                            accept=\".txt\"\r\n                                            :show-file-list=\"false\"\r\n                                            action=\"\"\r\n                                            :auto-upload=\"false\"\r\n                                            :on-change=\"primUpload\"\r\n                                            :limit=\"1\"\r\n                                            :on-exceed=\"handlePrimExceed\"\r\n                                            :file-list=\"fileList\">\r\n                                        <el-button style=\"width: 200px\" type=\"primary\">Select File</el-button>\r\n\r\n                                    </el-upload>\r\n\r\n                                    <el-input\r\n                                        disabled\r\n                                        type=\"textarea\"\r\n                                        :rows=\"4\"\r\n                                        v-model=\"prim_file_graph\">\r\n                                    </el-input>\r\n\r\n                                </div>\r\n                                <div v-if=\"prim_select_type === 'Import Graph from text box'\">\r\n                                    <div class=\"tip\">\r\n                                        <b>Note:</b>\r\n                                        <p>1. The id of node will start from 0.</p>\r\n                                        <p>2. The input consists of the number of edges in the graph</p>\r\n                                        <p>3. Each line is in the form of (start node, end node, weight).</p>\r\n                                        <p>4. Edges have same start node and end node will be record once.</p>\r\n                                    </div>\r\n                                    <el-input\r\n                                        type=\"textarea\"\r\n                                        :rows=\"4\"\r\n                                        placeholder=\"Please input your graph\"\r\n                                        v-model=\"prim_graph_text\">\r\n                                    </el-input>\r\n                                </div>\r\n                            </el-row>\r\n\r\n                            <div>\r\n                                <el-button style=\"width: 200px\" type=\"primary\" @click=\"prim\">Start Algorithm</el-button>\r\n                            </div>\r\n                        </div>\r\n                    </el-card>\r\n                </el-col>\r\n                <el-col :xs=\"24\" :sm=\"12\" :md=\"12\" :lg=\"12\" :xl=\"12\">\r\n                    <el-card class=\"card\">\r\n                        <div class=\"card_content\">\r\n                            <div class=\"card_title\">\r\n                                Minimum Spanning Tree algorithms\r\n                            </div>\r\n                            <div class=\"card_subtitle\">Kruskal Algorithm</div>\r\n                            <div style=\"width: 90%\">\r\n                                <p>Kruskal's algorithm is a greedy algorithm that in each step adds to the forest the lowest-weight edge that will not form a cycle. The key steps of the algorithm are sorting and detect cycles.</p>\r\n                            </div>\r\n                            <el-divider></el-divider>\r\n<!--                            <div>-->\r\n<!--                                <el-input placeholder=\"numbers of node in graph\"  v-model=\"kruskal_num\"></el-input>-->\r\n<!--                            </div>-->\r\n                            <p>Number of Vertices</p>\r\n                            <el-input placeholder=\"numbers of node in graph\" v-model=\"kruskal_num\"></el-input>\r\n                            <el-row>\r\n                                <p>Generate or Import Graph?</p>\r\n                                <div>\r\n                                    <el-select v-model=\"kruskal_select_type\" placeholder=\"Type of way for create graph\">\r\n                                        <el-option v-for=\"item in typeOption\"\r\n                                                   :key=\"item.value\"\r\n                                                   :label=\"item.label\"\r\n                                                   :value=\"item.value\"></el-option>\r\n                                    </el-select>\r\n                                </div>\r\n                                <div v-if=\"kruskal_select_type === 'Import Graph from file'\">\r\n                                    <div class=\"tip\">\r\n                                        <b>Note:</b>\r\n                                        <p>1. The id of node will start from 0.</p>\r\n                                        <p>2. The input consists of the number of edges in the graph</p>\r\n                                        <p>3. Each line is in the form of (start node, end node, weight).</p>\r\n                                        <p>4. Edges have same start node and end node will be record once.</p>\r\n                                        <p>5. Only txt file permitted</p>\r\n                                    </div>\r\n\r\n                                    <el-upload\r\n                                        accept=\".txt\"\r\n                                        :show-file-list=\"false\"\r\n                                        action=\"\"\r\n                                        :auto-upload=\"false\"\r\n                                        :on-change=\"kruUpload\"\r\n                                        :limit=\"1\"\r\n                                        :on-exceed=\"handleKruExceed\"\r\n                                        :file-list=\"fileList\">\r\n                                        <el-button style=\"width: 200px\" type=\"primary\">Select File</el-button>\r\n\r\n                                    </el-upload>\r\n\r\n                                    <el-input\r\n                                        disabled\r\n                                        type=\"textarea\"\r\n                                        :rows=\"4\"\r\n                                        v-model=\"kruskal_file_graph\">\r\n                                    </el-input>\r\n\r\n                                </div>\r\n                                <div v-if=\"kruskal_select_type === 'Import Graph from text box'\">\r\n                                    <div class=\"tip\">\r\n                                        <b>Note:</b>\r\n                                        <p>1. The id of node will start from 0.</p>\r\n                                        <p>2. The input consists of the number of edges in the graph</p>\r\n                                        <p>3. Each line is in the form of (start node, end node, weight).</p>\r\n                                        <p>4. Edges have same start node and end node will be record once.</p>\r\n                                    </div>\r\n                                    <el-input\r\n                                        type=\"textarea\"\r\n                                        :rows=\"4\"\r\n                                        placeholder=\"Please input your graph\"\r\n                                        v-model=\"kruskal_graph_text\">\r\n                                    </el-input>\r\n                                </div>\r\n                            </el-row>\r\n                            <div>\r\n                                <el-button style=\"width: 200px\" type=\"primary\" @click=\"kruskal\">Start Algorithm</el-button>\r\n                            </div>\r\n                        </div>\r\n                    </el-card>\r\n                </el-col>\r\n            </el-row>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n    name: \"AlgorithmView\",\r\n    data(){\r\n        return{\r\n            fileList:[],\r\n            prim_select_type: null,\r\n            prim_start: null,\r\n            prim_num: null,\r\n            kruskal_num: null,\r\n            kruskal_select_type: null,\r\n            kruskal_graph_text: null,\r\n            kruskal_file_graph: null,\r\n            prim_graph_text: null,\r\n            prim_file_graph: null,\r\n            typeOption: [\r\n                {\r\n                    value: 'Generate Graph',\r\n                    label: 'Generate Graph'\r\n                },\r\n                {\r\n                    value: 'Import Graph from file',\r\n                    label: 'Import Graph from file'\r\n                },\r\n                {\r\n                    value: 'Import Graph from text box',\r\n                    label: 'Import Graph from text box'\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    methods:{\r\n        async kruUpload(file,fileList) {\r\n\r\n            const fileSuffix = file.name.substring(file.name.lastIndexOf(\".\") + 1);\r\n\r\n            if (fileSuffix !== 'txt') {\r\n                fileList.pop()\r\n                this.$message.warning('Only txt files can be uploaded!')\r\n                return false;\r\n            }\r\n            const isLt2M = file.size / 1024 / 1024 < 2;\r\n\r\n            if (!isLt2M) {\r\n                fileList.pop()\r\n                this.$message.warning('File size cannot exceed 2MB!')\r\n                return false;\r\n            }\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                this.kruskal_file_graph = e.target.result;\r\n            };\r\n            reader.readAsText(file.raw);\r\n        },\r\n        handleKruExceed(files, fileList) {\r\n            this.$message.warning(`The limit is 1, you selected ${ files.length } files this time, add up to ${ files.length + fileList.length } totally, please try again.`);\r\n        },\r\n\r\n        async primUpload(file,fileList) {\r\n\r\n            const fileSuffix = file.name.substring(file.name.lastIndexOf(\".\") + 1);\r\n\r\n            if (fileSuffix !== 'txt') {\r\n                fileList.pop()\r\n                this.$message.warning('Only txt files can be uploaded!')\r\n                return false;\r\n            }\r\n            const isLt2M = file.size / 1024 / 1024 < 2;\r\n\r\n            if (!isLt2M) {\r\n                fileList.pop()\r\n                this.$message.warning('File size cannot exceed 2MB!')\r\n                return false;\r\n            }\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                this.prim_file_graph = e.target.result;\r\n            };\r\n            reader.readAsText(file.raw);\r\n        },\r\n        handlePrimExceed(files, fileList) {\r\n            this.$message.warning(`The limit is 1, you selected ${ files.length } files this time, add up to ${ files.length + fileList.length } totally, please try again.`);\r\n        },\r\n        prim(){\r\n            if(this.prim_num === null || this.prim_start === null){\r\n                this.$message.error(\"Please input number of vertices and start vertice\")\r\n                return\r\n            }\r\n            if(this.prim_select_type === null){\r\n                this.$message.error(\"Please select generate type of graph\")\r\n                return\r\n            }\r\n            if(this.prim_select_type === 'Import Graph from file' && this.prim_file_graph === null){\r\n                this.$message.error(\"Please upload graph file\")\r\n                return\r\n            }\r\n            if(this.prim_select_type === 'Import Graph from text box' && this.prim_graph_text === null) {\r\n                this.$message.error(\"Please input graph\")\r\n                return\r\n            }\r\n            let graph;\r\n            if(this.prim_select_type === 'Import Graph from text box' && this.prim_graph_text !== null){\r\n                graph = this.prim_graph_text\r\n                if(graph === null){\r\n                    graph = \"default\"\r\n                }\r\n            }\r\n            else if(this.prim_select_type === 'Import Graph from file' && this.prim_file_graph !== null){\r\n                graph = this.prim_file_graph\r\n            }\r\n            else{\r\n                graph = \"default\"\r\n            }\r\n            this.$router.push({name: 'prim', params: {num: this.prim_num, start: this.prim_start, type: this.prim_select_type, graph: graph}})\r\n        },\r\n        kruskal(){\r\n            if(this.kruskal_num === null){\r\n                this.$message.error(\"Please input number of vertices\")\r\n                return\r\n            }\r\n            if(this.kruskal_select_type === null){\r\n                this.$message.error(\"Please select generate type of graph\")\r\n                return\r\n            }\r\n            if(this.kruskal_select_type === 'Import Graph from file' && this.kruskal_file_graph === null){\r\n                this.$message.error(\"Please upload graph file\")\r\n                return\r\n            }\r\n            if(this.kruskal_select_type === 'Import Graph from text box' && this.kruskal_graph_text === null) {\r\n                this.$message.error(\"Please input graph\")\r\n                return\r\n            }\r\n            let graph;\r\n            if(this.kruskal_select_type === 'Import Graph from text box' && this.kruskal_graph_text !== null){\r\n                graph = this.kruskal_graph_text\r\n                if(graph === null){\r\n                    graph = \"default\"\r\n                }\r\n            }\r\n            else if(this.kruskal_select_type === 'Import Graph from file' && this.kruskal_file_graph !== null){\r\n                graph = this.kruskal_file_graph\r\n            }\r\n            else{\r\n                graph = \"default\"\r\n            }\r\n            this.$router.push({name: 'kruskal', params: {num: this.kruskal_num, type: this.kruskal_select_type, graph: graph}})\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.card{\r\n    margin: 1%;\r\n    padding: 1%;\r\n}\r\n.card_title{\r\n    /*float: left;*/\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    width: 100%;\r\n}\r\n.card_subtitle{\r\n    /*float: left;*/\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    width: 100%;\r\n    color: #999999;\r\n}\r\n.card_content {\r\n    float: left;\r\n    text-align: left;\r\n    line-height: 25px;\r\n}\r\n.card_content div{\r\n    margin-bottom: 10px;\r\n}\r\n.tip {\r\n    padding: 5px 10px;\r\n    background-color: #ecf8ff;\r\n    border-radius: 4px;\r\n    border-left: 5px solid #50bfff;\r\n    /*margin: 4px 0;*/\r\n}\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AlgorithmView.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AlgorithmView.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AlgorithmView.vue?vue&type=template&id=567e2919&scoped=true\"\nimport script from \"./AlgorithmView.vue?vue&type=script&lang=js\"\nexport * from \"./AlgorithmView.vue?vue&type=script&lang=js\"\nimport style0 from \"./AlgorithmView.vue?vue&type=style&index=0&id=567e2919&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"567e2919\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","_m","staticClass","attrs","_v","staticStyle","model","value","prim_num","callback","$$v","expression","prim_start","prim_select_type","_l","typeOption","item","key","label","primUpload","handlePrimExceed","fileList","prim_file_graph","_e","prim_graph_text","on","prim","kruskal_num","kruskal_select_type","kruUpload","handleKruExceed","kruskal_file_graph","kruskal_graph_text","kruskal","staticRenderFns","name","data","methods","file","fileSuffix","substring","lastIndexOf","pop","$message","warning","isLt2M","size","reader","FileReader","onload","e","target","result","readAsText","raw","files","length","error","graph","$router","push","params","num","start","type","component"],"sourceRoot":""}