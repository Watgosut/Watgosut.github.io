"use strict";(self["webpackChunkmst_vue"]=self["webpackChunkmst_vue"]||[]).push([[35],{3035:function(e,t,r){r.r(t),r.d(t,{default:function(){return o}});var a=function(){var e=this,t=e._self._c;return t("div",[e._m(0),t("div",{staticClass:"footer"},[t("el-row",{attrs:{gutter:20}},[t("el-col",{attrs:{xs:24,sm:12,md:12,lg:12,xl:12}},[t("el-card",{staticClass:"card"},[t("div",{staticClass:"card_content"},[t("div",{staticClass:"card_title"},[e._v(" Minimum Spanning Tree algorithms ")]),t("div",{staticClass:"card_subtitle"},[e._v("Prim Algorithm")]),t("div",{staticStyle:{width:"90%"}},[t("p",[e._v("In computer science, Prim's algorithm (also known as Jarn√≠k's algorithm) is a greedy algorithm that finds a minimum spanning tree for a weighted undirected graph.")])]),t("el-divider"),t("p",[e._v("Number of Vertices")]),t("el-input",{attrs:{placeholder:"numbers of node in graph"},model:{value:e.prim_num,callback:function(t){e.prim_num=t},expression:"prim_num"}}),t("p",[e._v("Start Node")]),t("el-input",{attrs:{placeholder:"start node"},model:{value:e.prim_start,callback:function(t){e.prim_start=t},expression:"prim_start"}}),t("el-row",[t("p",[e._v("Generate or Import Graph?")]),t("div",[t("el-select",{attrs:{placeholder:"Type of way for create graph"},model:{value:e.prim_select_type,callback:function(t){e.prim_select_type=t},expression:"prim_select_type"}},e._l(e.typeOption,(function(e){return t("el-option",{key:e.value,attrs:{label:e.label,value:e.value}})})),1)],1),"Import Graph from file"===e.prim_select_type?t("div",[t("div",{staticClass:"tip"},[t("b",[e._v("Note:")]),t("p",[e._v("1. The id of node will start from 0.")]),t("p",[e._v("2. The input consists of the number of edges in the graph")]),t("p",[e._v("3. Each line is in the form of (start node, end node, weight).")]),t("p",[e._v("4. Edges have same start node and end node will be record once.")]),t("p",[e._v("5. Only txt file permitted")])]),t("el-upload",{attrs:{accept:".txt","show-file-list":!1,action:"","auto-upload":!1,"on-change":e.primUpload,limit:1,"on-exceed":e.handlePrimExceed,"file-list":e.fileList}},[t("el-button",{staticStyle:{width:"200px"},attrs:{type:"primary"}},[e._v("Select File")])],1),t("el-input",{attrs:{disabled:"",type:"textarea",rows:4},model:{value:e.prim_file_graph,callback:function(t){e.prim_file_graph=t},expression:"prim_file_graph"}})],1):e._e(),"Import Graph from text box"===e.prim_select_type?t("div",[t("div",{staticClass:"tip"},[t("b",[e._v("Note:")]),t("p",[e._v("1. The id of node will start from 0.")]),t("p",[e._v("2. The input consists of the number of edges in the graph")]),t("p",[e._v("3. Each line is in the form of (start node, end node, weight).")]),t("p",[e._v("4. Edges have same start node and end node will be record once.")])]),t("el-input",{attrs:{type:"textarea",rows:4,placeholder:"Please input your graph"},model:{value:e.prim_graph_text,callback:function(t){e.prim_graph_text=t},expression:"prim_graph_text"}})],1):e._e()]),t("div",[t("el-button",{staticStyle:{width:"200px"},attrs:{type:"primary"},on:{click:e.prim}},[e._v("Start Algorithm")])],1)],1)])],1),t("el-col",{attrs:{xs:24,sm:12,md:12,lg:12,xl:12}},[t("el-card",{staticClass:"card"},[t("div",{staticClass:"card_content"},[t("div",{staticClass:"card_title"},[e._v(" Minimum Spanning Tree algorithms ")]),t("div",{staticClass:"card_subtitle"},[e._v("Kruskal Algorithm")]),t("div",{staticStyle:{width:"90%"}},[t("p",[e._v("Kruskal's algorithm is a greedy algorithm that in each step adds to the forest the lowest-weight edge that will not form a cycle. The key steps of the algorithm are sorting and detect cycles.")])]),t("el-divider"),t("p",[e._v("Number of Vertices")]),t("el-input",{attrs:{placeholder:"numbers of node in graph"},model:{value:e.kruskal_num,callback:function(t){e.kruskal_num=t},expression:"kruskal_num"}}),t("el-row",[t("p",[e._v("Generate or Import Graph?")]),t("div",[t("el-select",{attrs:{placeholder:"Type of way for create graph"},model:{value:e.kruskal_select_type,callback:function(t){e.kruskal_select_type=t},expression:"kruskal_select_type"}},e._l(e.typeOption,(function(e){return t("el-option",{key:e.value,attrs:{label:e.label,value:e.value}})})),1)],1),"Import Graph from file"===e.kruskal_select_type?t("div",[t("div",{staticClass:"tip"},[t("b",[e._v("Note:")]),t("p",[e._v("1. The id of node will start from 0.")]),t("p",[e._v("2. The input consists of the number of edges in the graph")]),t("p",[e._v("3. Each line is in the form of (start node, end node, weight).")]),t("p",[e._v("4. Edges have same start node and end node will be record once.")]),t("p",[e._v("5. Only txt file permitted")])]),t("el-upload",{attrs:{accept:".txt","show-file-list":!1,action:"","auto-upload":!1,"on-change":e.kruUpload,limit:1,"on-exceed":e.handleKruExceed,"file-list":e.fileList}},[t("el-button",{staticStyle:{width:"200px"},attrs:{type:"primary"}},[e._v("Select File")])],1),t("el-input",{attrs:{disabled:"",type:"textarea",rows:4},model:{value:e.kruskal_file_graph,callback:function(t){e.kruskal_file_graph=t},expression:"kruskal_file_graph"}})],1):e._e(),"Import Graph from text box"===e.kruskal_select_type?t("div",[t("div",{staticClass:"tip"},[t("b",[e._v("Note:")]),t("p",[e._v("1. The id of node will start from 0.")]),t("p",[e._v("2. The input consists of the number of edges in the graph")]),t("p",[e._v("3. Each line is in the form of (start node, end node, weight).")]),t("p",[e._v("4. Edges have same start node and end node will be record once.")])]),t("el-input",{attrs:{type:"textarea",rows:4,placeholder:"Please input your graph"},model:{value:e.kruskal_graph_text,callback:function(t){e.kruskal_graph_text=t},expression:"kruskal_graph_text"}})],1):e._e()]),t("div",[t("el-button",{staticStyle:{width:"200px"},attrs:{type:"primary"},on:{click:e.kruskal}},[e._v("Start Algorithm")])],1)],1)])],1)],1)],1)])},l=[function(){var e=this,t=e._self._c;return t("div",{staticClass:"text",staticStyle:{margin:"5%"}},[t("h1",{staticStyle:{color:"#409EFF"}},[e._v("Learn Minimum Spanning Forest Algorithm!")])])}],i=(r(560),{name:"AlgorithmView",data(){return{fileList:[],prim_select_type:null,prim_start:null,prim_num:null,kruskal_num:null,kruskal_select_type:null,kruskal_graph_text:null,kruskal_file_graph:null,prim_graph_text:null,prim_file_graph:null,typeOption:[{value:"Generate Graph",label:"Generate Graph"},{value:"Import Graph from file",label:"Import Graph from file"},{value:"Import Graph from text box",label:"Import Graph from text box"}]}},methods:{async kruUpload(e,t){const r=e.name.substring(e.name.lastIndexOf(".")+1);if("txt"!==r)return t.pop(),this.$message.warning("Only txt files can be uploaded!"),!1;const a=e.size/1024/1024<2;if(!a)return t.pop(),this.$message.warning("File size cannot exceed 2MB!"),!1;const l=new FileReader;l.onload=e=>{this.kruskal_file_graph=e.target.result},l.readAsText(e.raw)},handleKruExceed(e,t){this.$message.warning(`The limit is 1, you selected ${e.length} files this time, add up to ${e.length+t.length} totally, please try again.`)},async primUpload(e,t){const r=e.name.substring(e.name.lastIndexOf(".")+1);if("txt"!==r)return t.pop(),this.$message.warning("Only txt files can be uploaded!"),!1;const a=e.size/1024/1024<2;if(!a)return t.pop(),this.$message.warning("File size cannot exceed 2MB!"),!1;const l=new FileReader;l.onload=e=>{this.prim_file_graph=e.target.result},l.readAsText(e.raw)},handlePrimExceed(e,t){this.$message.warning(`The limit is 1, you selected ${e.length} files this time, add up to ${e.length+t.length} totally, please try again.`)},prim(){if(null===this.prim_num||null===this.prim_start)return void this.$message.error("Please input number of vertices and start vertice");if(null===this.prim_select_type)return void this.$message.error("Please select generate type of graph");if("Import Graph from file"===this.prim_select_type&&null===this.prim_file_graph)return void this.$message.error("Please upload graph file");if("Import Graph from text box"===this.prim_select_type&&null===this.prim_graph_text)return void this.$message.error("Please input graph");let e;"Import Graph from text box"===this.prim_select_type&&null!==this.prim_graph_text?(e=this.prim_graph_text,null===e&&(e="default")):e="Import Graph from file"===this.prim_select_type&&null!==this.prim_file_graph?this.prim_file_graph:"default",this.$router.push({name:"prim",params:{num:this.prim_num,start:this.prim_start,type:this.prim_select_type,graph:e}})},kruskal(){if(null===this.kruskal_num)return void this.$message.error("Please input number of vertices");if(null===this.kruskal_select_type)return void this.$message.error("Please select generate type of graph");if("Import Graph from file"===this.kruskal_select_type&&null===this.kruskal_file_graph)return void this.$message.error("Please upload graph file");if("Import Graph from text box"===this.kruskal_select_type&&null===this.kruskal_graph_text)return void this.$message.error("Please input graph");let e;"Import Graph from text box"===this.kruskal_select_type&&null!==this.kruskal_graph_text?(e=this.kruskal_graph_text,null===e&&(e="default")):e="Import Graph from file"===this.kruskal_select_type&&null!==this.kruskal_file_graph?this.kruskal_file_graph:"default",this.$router.push({name:"kruskal",params:{num:this.kruskal_num,type:this.kruskal_select_type,graph:e}})}}}),s=i,n=r(3736),p=(0,n.Z)(s,a,l,!1,null,"567e2919",null),o=p.exports}}]);
//# sourceMappingURL=35.907ad658.js.map